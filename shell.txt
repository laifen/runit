Shell脚本文件的参数
文件参数 
在shell脚本中使用参数的方法如下：
./b.sh start #start 就是第一个参数
调用方法：
./b.sh test1 输出结果是：this is runpara1
./b.sh test2 输出结果是：this is runpara2
特殊的文件参数
$0 脚本程序名称
$n 程序文件的第n个参数
$* 程序文件的所有参数
$# 程序文件参数的个数 
$$ 程序文件执行时的PID
看如下脚本文件b.sh
#!/bin/bash
runpara1() #函数声明 
{
echo "this is runpara1" 
}
runpara2() ##函数声明 
{
echo "this is runpara2" 
}
if [ $# -gt 0 ]
then
echo “para count >0”
fi
case $1 in # $1 代表第一个参数的值 
test1) #如果参数是test1就执行函数runpara1 
runpara1
;;
test2)
runpara2
;;
esac
函数的参数
如下文件 b.sh
#!/bin/bash
testfunction () #声明函数
{
if [ -z "$1" ] #判断函数是否存在参数（$1）
then
echo "no para in function" #无参数处理过程
else
echo "function's paraname is "$1"" #有参数处理过程
fi
}
testfunction start #执行函数，函数的参数是start
执行结果：function’s paraname is start
类型变量 
declare 声明类型变量
declare –r abc=”test string” #声明abc是只读类型
declare –i int1 #声明int1是整数类型
declare –a arr1 #声明arr1为数组变量
declare -f 函数名（可选） #当存在函数名时，只会列出文件中的名称是所写函数的定义，如果不存在函数名，则列出所有函数的声明
看下面的例子b.sh：
#!/bin/bash
declare -r abc="test declare" #声明只读变量abc 
echo "echo $abc"
abc="read only" #将会出现错误提示，因为abc是只读变量 
echo "echo $abc" #打印abc变量，还是“test declare”没有变化 
declare -i int1 #声明整型变量int1 
int1=12;
int1="test string" #给整型赋值为字符串，错误 
echo "$int1"
int1=int1/3 #整型变量可以直接使用操作符/ 
echo “$int1”
func1() #声明函数func1 
{
echo "test function"
}
func2() #声明函数func2 
{
echo "test function"
}
declare –f #显示所有函数 
declare -f func1 #显示函数func1 
文件的执行结果如下：
echo test declare
./b.sh: abc: readonly variable #只读变量错误提示 
echo test declare
./b.sh: test string: syntax error in expression (error token is "string") #变量类型错误 
12
4 #显示的是 12/3的结果 
declare -f func1 () #显示所有函数 
{ 
echo "test function"
}
declare -f func2 () 
{ 
echo "test function"
}
func1 () #显示函数func1 
{ 
echo "test function"
}

sheshshsShell
　　Shell支持自定义变量。 
　　6.1 定义变量
　　定义变量时，变量名不加美元符号（$），如： 
variableName="value"
　　注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则： 
•	首个字符必须为字母（a-z，A-Z）。
•	中间不能有空格，可以使用下划线（_）。
•	不能使用标点符号。
•	不能使用bash里的关键字（可用help命令查看保留关键字）。
　　变量定义举例： 
myUrl="http://see.xidian.edu.cn/cpp/linux/"
myNum=100
　　6.2 使用变量
　　使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如： 
your_name="mozhiyan"
echo $your_name
echo ${your_name}
　　变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况： 
for skill in Ada Coffe Action Java
do
echo "I am good at ${skill}Script"
done
　　如果不给skill变量加花括号，写成echo "I am good at skillScript"，解释器就会把 skillScript"，解释器就会把 skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。
推荐给所有变量加上花括号，这是个好的编程习惯。 
　　6.3 重新定义变量
　　已定义的变量，可以被重新定义，如： 
myUrl="http://see.xidian.edu.cn/cpp/linux/"
echo ${myUrl}
myUrl="http://see.xidian.edu.cn/cpp/shell/"
echo ${myUrl}
　　这样写是合法的，但注意，第二次赋值的时候不能写 myUrl="http://see.xidian.edu.cn/cpp/shell/"，使用变量的时候才加美元符（ myUrl="http://see.xidian.edu.cn/cpp/shell/"，使用变量的时候才加美元符（ ）。 
　　6.4 只读变量
　　使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
　　下面的例子尝试更改只读变量，结果报错： 
#!/bin/bash
myUrl="http://see.xidian.edu.cn/cpp/shell/"
readonly myUrl
myUrl="http://see.xidian.edu.cn/cpp/danpianji/"
　　运行脚本，结果如下：
/bin/sh: NAME: This variable is read only.
　　6.5 删除变量
　　使用 unset 命令可以删除变量。语法： 
unset variable_name
　　变量被删除后不能再次使用；unset 命令不能删除只读变量。
　　举个例子： 
#!/bin/sh
myUrl="http://see.xidian.edu.cn/cpp/u/xitong/"
unset myUrl
echo $myUrl
　　上面的脚本没有任何输出。 
　　6.6 变量类型
　　运行shell时，会同时存在三种变量：
　　1) 局部变量
　　局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。 
　　2) 环境变量
　　所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。 
　　3) shell变量
　　shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行
回到顶部
7.Shell特殊变量
　　前面已经讲到，变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被称为特殊变量。
　　例如，$ 表示当前Shell进程的ID，即pid，看下面的代码： 
$echo $$
　　运行结果: 29949


